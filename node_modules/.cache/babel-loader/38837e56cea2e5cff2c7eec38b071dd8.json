{"ast":null,"code":"import _regeneratorRuntime from \"/Users/chosun/Project/demo1/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport { call, put } from 'redux-saga/effects';\nimport { startLoading, finishLoading } from '../modules/loading';\nexport var createRequestActionTypes = function createRequestActionTypes(type) {\n  var SUCCESS = \"\".concat(type, \"_SUCCESS\");\n  var FAILURE = \"\".concat(type, \"_FAILURE\");\n  return [type, SUCCESS, FAILURE];\n};\nexport default function createRequestSaga(type, request) {\n  var SUCCESS = \"\".concat(type, \"_SUCCESS\");\n  var FAILURE = \"\".concat(type, \"_FAILURE\");\n  return (\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(action) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return put(startLoading(type));\n\n            case 2:\n              _context.prev = 2;\n              _context.next = 5;\n              return call(request, action.payload);\n\n            case 5:\n              response = _context.sent;\n              _context.next = 8;\n              return put({\n                type: SUCCESS,\n                payload: response.data\n              });\n\n            case 8:\n              _context.next = 14;\n              break;\n\n            case 10:\n              _context.prev = 10;\n              _context.t0 = _context[\"catch\"](2);\n              _context.next = 14;\n              return put({\n                type: FAILURE,\n                payload: _context.t0,\n                error: true\n              });\n\n            case 14:\n              _context.next = 16;\n              return put(finishLoading(type));\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 10]]);\n    })\n  );\n}","map":{"version":3,"sources":["/Users/chosun/Project/demo1/front-end/src/app/lib/createRequestSaga.js"],"names":["call","put","startLoading","finishLoading","createRequestActionTypes","type","SUCCESS","FAILURE","createRequestSaga","request","action","payload","response","data","error"],"mappings":";AAAA,SAASA,IAAT,EAAeC,GAAf,QAAyB,oBAAzB;AACA,SAASC,YAAT,EAAwBC,aAAxB,QAA4C,oBAA5C;AAEA,OAAO,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAAC,IAAI,EAAI;AAC5C,MAAMC,OAAO,aAAMD,IAAN,aAAb;AACA,MAAME,OAAO,aAAMF,IAAN,aAAb;AACA,SAAO,CAACA,IAAD,EAAOC,OAAP,EAAeC,OAAf,CAAP;AACH,CAJM;AAMP,eAAe,SAASC,iBAAT,CAA4BH,IAA5B,EAAiCI,OAAjC,EAA0C;AACrD,MAAMH,OAAO,aAAMD,IAAN,aAAb;AACA,MAAME,OAAO,aAAMF,IAAN,aAAb;AAEA;AAAA;AAAA,6BAAO,iBAAUK,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACH,qBAAMT,GAAG,CAACC,YAAY,CAACG,IAAD,CAAb,CAAT;;AADG;AAAA;AAAA;AAGkB,qBAAML,IAAI,CAACS,OAAD,EAASC,MAAM,CAACC,OAAhB,CAAV;;AAHlB;AAGOC,cAAAA,QAHP;AAAA;AAIC,qBAAMX,GAAG,CAAC;AACNI,gBAAAA,IAAI,EAACC,OADC;AAENK,gBAAAA,OAAO,EAACC,QAAQ,CAACC;AAFX,eAAD,CAAT;;AAJD;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASC,qBAAMZ,GAAG,CAAC;AACNI,gBAAAA,IAAI,EAACE,OADC;AAENI,gBAAAA,OAAO,aAFD;AAGNG,gBAAAA,KAAK,EAAC;AAHA,eAAD,CAAT;;AATD;AAAA;AAeH,qBAAMb,GAAG,CAACE,aAAa,CAACE,IAAD,CAAd,CAAT;;AAfG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AAAA;AAiBH","sourcesContent":["import { call, put} from 'redux-saga/effects';\nimport { startLoading , finishLoading} from '../modules/loading';\n\nexport const createRequestActionTypes = type => {\n    const SUCCESS = `${type}_SUCCESS`;\n    const FAILURE = `${type}_FAILURE`;\n    return [type, SUCCESS,FAILURE];\n};\n\nexport default function createRequestSaga (type,request) {\n    const SUCCESS = `${type}_SUCCESS`;\n    const FAILURE = `${type}_FAILURE`;\n\n    return function*(action){\n        yield put(startLoading(type)); // 로딩 시작\n        try {\n            const response = yield call(request,action.payload);\n            yield put({\n                type:SUCCESS,\n                payload:response.data,\n            });\n        }catch(e){\n            yield put({\n                type:FAILURE,\n                payload: e,\n                error:true,\n            });\n        }\n        yield put(finishLoading(type)); // 로딩 끝\n    };\n}"]},"metadata":{},"sourceType":"module"}