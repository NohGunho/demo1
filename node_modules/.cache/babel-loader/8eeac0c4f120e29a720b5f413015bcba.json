{"ast":null,"code":"import _regeneratorRuntime from \"/Users/chosun/Project/demo1/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/chosun/Project/demo1/front-end/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(saga);\n\nimport { persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { put, takeLatest } from \"redux-saga/effects\";\nimport { getUserByToken } from \"../../crud/auth.crud\";\nimport * as routerHelpers from \"../../router/RouterHelpers\";\nexport var actionTypes = {\n  Login: \"[Login] Action\",\n  Logout: \"[Logout] Action\",\n  Register: \"[Register] Action\",\n  UserRequested: \"[Request User] Action\",\n  UserLoaded: \"[Load User] Auth API\"\n}; // initialState 초기값 설정.\n\nvar initialAuthState = {\n  user: undefined,\n  authToken: undefined\n}; // ducks 기법은 reducer파일과 action파일을 나누지 않고 사용하는 기법.\n\nexport var reducer = persistReducer(function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialAuthState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.Login:\n      {\n        var authToken = action.payload.authToken;\n        return {\n          authToken: authToken,\n          user: undefined\n        };\n      }\n\n    case actionTypes.Register:\n      {\n        var _authToken = action.payload.authToken;\n        return {\n          authToken: _authToken,\n          user: undefined\n        };\n      }\n\n    case actionTypes.Logout:\n      {\n        routerHelpers.forgotLastLocation();\n        return initialAuthState;\n      }\n\n    case actionTypes.UserLoaded:\n      {\n        var user = action.payload.user;\n        return _objectSpread({}, state, {\n          user: user\n        });\n      }\n\n    default:\n      return state;\n  }\n});\nexport var actions = {\n  login: function login(authToken) {\n    return {\n      type: actionTypes.Login,\n      payload: {\n        authToken: authToken\n      }\n    };\n  },\n  register: function register(authToken) {\n    return {\n      type: actionTypes.Register,\n      payload: {\n        authToken: authToken\n      }\n    };\n  },\n  logout: function logout() {\n    return {\n      type: actionTypes.Logout\n    };\n  },\n  requestUser: function requestUser(user) {\n    return {\n      type: actionTypes.UserRequested,\n      payload: {\n        user: user\n      }\n    };\n  },\n  fulfillUser: function fulfillUser(user) {\n    return {\n      type: actionTypes.UserLoaded,\n      payload: {\n        user: user\n      }\n    };\n  }\n};\nexport function saga() {\n  return _regeneratorRuntime.wrap(function saga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(actionTypes.Login,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function loginSaga() {\n            return _regeneratorRuntime.wrap(function loginSaga$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return put(actions.requestUser());\n\n                  case 2:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, loginSaga);\n          }));\n\n        case 2:\n          _context4.next = 4;\n          return takeLatest(actionTypes.Register,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function registerSaga() {\n            return _regeneratorRuntime.wrap(function registerSaga$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    _context2.next = 2;\n                    return put(actions.requestUser());\n\n                  case 2:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, registerSaga);\n          }));\n\n        case 4:\n          _context4.next = 6;\n          return takeLatest(actionTypes.UserRequested,\n          /*#__PURE__*/\n          _regeneratorRuntime.mark(function userRequested() {\n            var _ref, user;\n\n            return _regeneratorRuntime.wrap(function userRequested$(_context3) {\n              while (1) {\n                switch (_context3.prev = _context3.next) {\n                  case 0:\n                    _context3.next = 2;\n                    return getUserByToken();\n\n                  case 2:\n                    _ref = _context3.sent;\n                    user = _ref.data;\n                    _context3.next = 6;\n                    return put(actions.fulfillUser(user));\n\n                  case 6:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }\n            }, userRequested);\n          }));\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked);\n}","map":{"version":3,"sources":["/Users/chosun/Project/demo1/front-end/src/app/store/ducks/auth.duck.js"],"names":["saga","persistReducer","storage","put","takeLatest","getUserByToken","routerHelpers","actionTypes","Login","Logout","Register","UserRequested","UserLoaded","initialAuthState","user","undefined","authToken","reducer","state","action","type","payload","forgotLastLocation","actions","login","register","logout","requestUser","fulfillUser","loginSaga","registerSaga","userRequested","data"],"mappings":"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","sourcesContent":["import { persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { put, takeLatest } from \"redux-saga/effects\";\r\nimport { getUserByToken } from \"../../crud/auth.crud\";\r\nimport * as routerHelpers from \"../../router/RouterHelpers\";\r\n\r\nexport const actionTypes = {\r\n  Login: \"[Login] Action\",\r\n  Logout: \"[Logout] Action\",\r\n  Register: \"[Register] Action\",\r\n  UserRequested: \"[Request User] Action\",\r\n  UserLoaded: \"[Load User] Auth API\"\r\n};\r\n// initialState 초기값 설정.\r\nconst initialAuthState = {\r\n  user: undefined,\r\n  authToken: undefined\r\n};\r\n// ducks 기법은 reducer파일과 action파일을 나누지 않고 사용하는 기법.\r\nexport const reducer = persistReducer(\r\n    (state = initialAuthState, action) => {\r\n      switch (action.type) {\r\n        case actionTypes.Login: {\r\n          const { authToken } = action.payload;\r\n\r\n          return { authToken, user: undefined };\r\n        }\r\n\r\n        case actionTypes.Register: {\r\n          const { authToken } = action.payload;\r\n\r\n          return { authToken, user: undefined };\r\n        }\r\n\r\n        case actionTypes.Logout: {\r\n          routerHelpers.forgotLastLocation();\r\n          return initialAuthState;\r\n        }\r\n\r\n        case actionTypes.UserLoaded: {\r\n          const { user } = action.payload;\r\n\r\n          return { ...state, user };\r\n        }\r\n\r\n        default:\r\n          return state;\r\n      }\r\n    }\r\n);\r\n\r\nexport const actions = {\r\n  login: authToken => ({ type: actionTypes.Login, payload: { authToken } }),\r\n  register: authToken => ({\r\n    type: actionTypes.Register,\r\n    payload: { authToken }\r\n  }),\r\n  logout: () => ({ type: actionTypes.Logout }),\r\n  requestUser: user => ({ type: actionTypes.UserRequested, payload: { user } }),\r\n  fulfillUser: user => ({ type: actionTypes.UserLoaded, payload: { user } })\r\n};\r\n\r\nexport function* saga() {\r\n  yield takeLatest(actionTypes.Login, function* loginSaga() {\r\n    yield put(actions.requestUser());\r\n  });\r\n\r\n  yield takeLatest(actionTypes.Register, function* registerSaga() {\r\n    yield put(actions.requestUser());\r\n  });\r\n\r\n  yield takeLatest(actionTypes.UserRequested, function* userRequested() {\r\n    const { data: user } = yield getUserByToken();\r\n\r\n    yield put(actions.fulfillUser(user));\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}