{"ast":null,"code":"var _jsxFileName = \"/Users/chosun/Project/metronic_v6.1.6/theme/react/demo1/client/src/app/pages/home/google-material/layout/BoxExamplesPage.js\";\nimport React from \"react\";\nimport Notice from \"../../../../partials/content/Notice\";\nimport { Box } from \"@material-ui/core\";\nimport CodeExample from \"../../../../partials/content/CodeExample\";\nvar jsCode = \"\\n<Box component=\\\"span\\\" m={5}>\\n  <Button />\\n</Box>\\n\";\nvar jsCode2 = \"\\n<Box color=\\\"text.primary\\\" clone>\\n  <Button />\\n</Box>\\n\";\nvar jsCode3 = \"\\n<Box color=\\\"text.primary\\\">\\n  {props => <Button {...props} />}\\n</Box>\\n\";\nexport default function BoxExamplesPage() {\n  return React.createElement(React.Fragment, null, React.createElement(Notice, {\n    icon: \"flaticon-warning kt-font-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"The Box component serves as a wrapper component for most of the CSS utility needs.\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"For more info please check the components's official\", \" \", React.createElement(\"a\", {\n    target: \"_blank\",\n    className: \"kt-link\",\n    rel: \"noopener noreferrer\",\n    href: \"https://material-ui.com/components/box/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"demos & documentation\"))), React.createElement(CodeExample, {\n    jsCode: jsCode,\n    beforeCodeTitle: \"Common example\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"kt-section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"kt-section__sub\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"The Box component wraps your component. It creates a new DOM element, a \", React.createElement(\"code\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"<div>\"), \" by default that can be changed with the \", React.createElement(\"code\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"component\"), \" property. Let's say you want to use a \", React.createElement(\"code\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"<span>\"), \" with \", React.createElement(\"code\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"margin\"), \" instead of\", \" \", React.createElement(\"code\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"<div>\"), \":\"), React.createElement(\"div\", {\n    className: \"kt-separator kt-separator--dashed\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"kt-section__content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(Box, {\n    component: \"span\",\n    m: 5,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn btn-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Button with margin 5\"))))), React.createElement(CodeExample, {\n    jsCode: jsCode2,\n    beforeCodeTitle: \"Clone example\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"kt-section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"kt-section__sub\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, \"However, sometimes you have to target the underlying DOM element. For instance, you want to change the text color of the button. The Button component defines its own color. CSS inheritance doesn't help. To workaround the problem, you have two options:\"), React.createElement(\"p\", {\n    className: \"kt-section__sub\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"1. \", React.createElement(\"code\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Use React.cloneElement()\")), React.createElement(\"p\", {\n    className: \"kt-section__sub\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"The Box component has a clone property to enable the usage of the clone element method of React.\"), React.createElement(\"div\", {\n    className: \"kt-separator kt-separator--dashed\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"kt-section__content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(Box, {\n    color: \"text.primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"button\",\n    className: \"btn\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Primary text\"))))), React.createElement(CodeExample, {\n    jsCode: jsCode3,\n    beforeCodeTitle: \"Props example\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"kt-section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"kt-section__sub\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"2. \", React.createElement(\"code\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, \"Use render props\")), React.createElement(\"p\", {\n    className: \"kt-section__sub\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"The Box children accepts a render props function. You can pull out the \", React.createElement(\"code\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"className\"), \".\"), React.createElement(\"div\", {\n    className: \"kt-separator kt-separator--dashed\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"kt-section__content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(Box, {\n    color: \"text.primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, function (props) {\n    return React.createElement(\"button\", Object.assign({\n      type: \"button\",\n      className: \"btn\"\n    }, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), \"PROPS\", \" \");\n  })))), React.createElement(Notice, {\n    icon: \"flaticon-warning kt-font-primary\",\n    className: \"alert-warning\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"The CSS specificity relies on the import order. If you want the guarantee that the wrapped component's style will be overridden, you need to import the Box last.\"));\n}","map":{"version":3,"sources":["/Users/chosun/Project/metronic_v6.1.6/theme/react/demo1/client/src/app/pages/home/google-material/layout/BoxExamplesPage.js"],"names":["React","Notice","Box","CodeExample","jsCode","jsCode2","jsCode3","BoxExamplesPage","props"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Notice from \"../../../../partials/content/Notice\";\r\nimport { Box } from \"@material-ui/core\";\r\nimport CodeExample from \"../../../../partials/content/CodeExample\";\r\n\r\nconst jsCode = `\r\n<Box component=\"span\" m={5}>\r\n  <Button />\r\n</Box>\r\n`;\r\nconst jsCode2 = `\r\n<Box color=\"text.primary\" clone>\r\n  <Button />\r\n</Box>\r\n`;\r\nconst jsCode3 = `\r\n<Box color=\"text.primary\">\r\n  {props => <Button {...props} />}\r\n</Box>\r\n`;\r\n\r\nexport default function BoxExamplesPage() {\r\n  return (\r\n    <>\r\n      <Notice icon=\"flaticon-warning kt-font-primary\">\r\n        <p>\r\n          The Box component serves as a wrapper component for most of the CSS\r\n          utility needs.\r\n        </p>\r\n        <p>\r\n          For more info please check the components's official{\" \"}\r\n          <a\r\n            target=\"_blank\"\r\n            className=\"kt-link\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://material-ui.com/components/box/\"\r\n          >\r\n            demos & documentation\r\n          </a>\r\n        </p>\r\n      </Notice>\r\n\r\n      <CodeExample jsCode={jsCode} beforeCodeTitle=\"Common example\">\r\n        <div className=\"kt-section\">\r\n          <span className=\"kt-section__sub\">\r\n            The Box component wraps your component. It creates a new DOM\r\n            element, a <code>&lt;div&gt;</code> by default that can be changed\r\n            with the <code>component</code> property. Let's say you want to use\r\n            a <code>&lt;span&gt;</code> with <code>margin</code> instead of{\" \"}\r\n            <code>&lt;div&gt;</code>:\r\n          </span>\r\n          <div className=\"kt-separator kt-separator--dashed\"></div>\r\n          <div className=\"kt-section__content\">\r\n            <Box component=\"span\" m={5}>\r\n              <button type=\"button\" className=\"btn btn-primary\">\r\n                Button with margin 5\r\n              </button>\r\n            </Box>\r\n          </div>\r\n        </div>\r\n      </CodeExample>\r\n\r\n      <CodeExample jsCode={jsCode2} beforeCodeTitle=\"Clone example\">\r\n        <div className=\"kt-section\">\r\n          <p className=\"kt-section__sub\">\r\n            However, sometimes you have to target the underlying DOM element.\r\n            For instance, you want to change the text color of the button. The\r\n            Button component defines its own color. CSS inheritance doesn't\r\n            help. To workaround the problem, you have two options:\r\n          </p>\r\n          <p className=\"kt-section__sub\">\r\n            1. <code>Use React.cloneElement()</code>\r\n          </p>\r\n          <p className=\"kt-section__sub\">\r\n            The Box component has a clone property to enable the usage of the\r\n            clone element method of React.\r\n          </p>\r\n          <div className=\"kt-separator kt-separator--dashed\"></div>\r\n          <div className=\"kt-section__content\">\r\n            <Box color=\"text.primary\">\r\n              <button type=\"button\" className=\"btn\">\r\n                Primary text\r\n              </button>\r\n            </Box>\r\n          </div>\r\n        </div>\r\n      </CodeExample>\r\n\r\n      <CodeExample jsCode={jsCode3} beforeCodeTitle=\"Props example\">\r\n        <div className=\"kt-section\">\r\n          <p className=\"kt-section__sub\">\r\n            2. <code>Use render props</code>\r\n          </p>\r\n          <p className=\"kt-section__sub\">\r\n            The Box children accepts a render props function. You can pull out\r\n            the <code>className</code>.\r\n          </p>\r\n          <div className=\"kt-separator kt-separator--dashed\"></div>\r\n          <div className=\"kt-section__content\">\r\n            <Box color=\"text.primary\">\r\n              {props => (\r\n                <button type=\"button\" className=\"btn\" {...props}>\r\n                  PROPS{\" \"}\r\n                </button>\r\n              )}\r\n            </Box>\r\n          </div>\r\n        </div>\r\n      </CodeExample>\r\n\r\n      <Notice icon=\"flaticon-warning kt-font-primary\" className=\"alert-warning\">\r\n        The CSS specificity relies on the import order. If you want the\r\n        guarantee that the wrapped component's style will be overridden, you\r\n        need to import the Box last.\r\n      </Notice>\r\n    </>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}