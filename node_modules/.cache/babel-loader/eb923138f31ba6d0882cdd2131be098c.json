{"ast":null,"code":"import _classCallCheck from \"/Users/chosun/Project/metronic_v6.1.6/theme/react/demo1/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chosun/Project/metronic_v6.1.6/theme/react/demo1/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/chosun/Project/metronic_v6.1.6/theme/react/demo1/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/chosun/Project/metronic_v6.1.6/theme/react/demo1/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/chosun/Project/metronic_v6.1.6/theme/react/demo1/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/chosun/Project/metronic_v6.1.6/theme/react/demo1/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/chosun/Project/metronic_v6.1.6/theme/react/demo1/client/src/app/pages/home/react-bootstrap/ButtonsExamplesPage.js\";\n\n/* eslint-disable jsx-a11y/anchor-is-valid */\nimport React from \"react\";\nimport Notice from \"../../../partials/content/Notice\";\nimport CodeExample from \"../../../partials/content/CodeExample\";\nimport { Button, ButtonToolbar, ButtonGroup, ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\n\nfunction simulateNetworkRequest() {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, 2000);\n  });\n}\n\nvar LoadingButton =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LoadingButton, _React$Component);\n\n  function LoadingButton(props, context) {\n    var _this;\n\n    _classCallCheck(this, LoadingButton);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LoadingButton).call(this, props, context));\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_this));\n    _this.state = {\n      isLoading: false\n    };\n    return _this;\n  }\n\n  _createClass(LoadingButton, [{\n    key: \"handleClick\",\n    value: function handleClick() {\n      var _this2 = this;\n\n      this.setState({\n        isLoading: true\n      }, function () {\n        simulateNetworkRequest().then(function () {\n          _this2.setState({\n            isLoading: false\n          });\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var isLoading = this.state.isLoading;\n      return React.createElement(Button, {\n        variant: \"primary\",\n        disabled: isLoading,\n        onClick: !isLoading ? this.handleClick : null,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, isLoading ? \"Loadingâ€¦\" : \"Click to load\");\n    }\n  }]);\n\n  return LoadingButton;\n}(React.Component);\n\nvar ToggleButtonGroupControlled =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(ToggleButtonGroupControlled, _React$Component2);\n\n  function ToggleButtonGroupControlled(props, context) {\n    var _this3;\n\n    _classCallCheck(this, ToggleButtonGroupControlled);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(ToggleButtonGroupControlled).call(this, props, context));\n    _this3.handleChange = _this3.handleChange.bind(_assertThisInitialized(_this3));\n    _this3.state = {\n      value: [1, 3]\n    };\n    return _this3;\n  }\n\n  _createClass(ToggleButtonGroupControlled, [{\n    key: \"handleChange\",\n    value: function handleChange(value, event) {\n      this.setState({\n        value: value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ToggleButtonGroup, {\n        type: \"checkbox\",\n        onChange: this.handleChange,\n        defaultValue: this.state.value,\n        name: \"toggleButtonGroup\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(ToggleButton, {\n        value: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Option 1\"), React.createElement(ToggleButton, {\n        value: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Option 2\"), React.createElement(ToggleButton, {\n        value: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Option 3\"));\n    }\n  }]);\n\n  return ToggleButtonGroupControlled;\n}(React.Component);\n\nvar ButtonsExamplesPage =\n/*#__PURE__*/\nfunction (_React$Component3) {\n  _inherits(ButtonsExamplesPage, _React$Component3);\n\n  function ButtonsExamplesPage() {\n    _classCallCheck(this, ButtonsExamplesPage);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ButtonsExamplesPage).apply(this, arguments));\n  }\n\n  _createClass(ButtonsExamplesPage, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, null, React.createElement(Notice, {\n        icon: \"flaticon-warning kt-font-primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"Custom button styles for actions in forms, dialogs, and more with support for multiple sizes, states, and more.\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, \"For more info please check the components's official\", \" \", React.createElement(\"a\", {\n        target: \"_blank\",\n        className: \"kt-link\",\n        rel: \"noopener noreferrer\",\n        href: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, \"demos & documentation\"))), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(CodeExample, {\n        jsCode: jsCode1,\n        beforeCodeTitle: \"Examples\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"kt-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"kt-section__sub\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Use any of the available button style types to quickly create a styled button. Just modify the \", React.createElement(\"code\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"variant\"), \" prop.\"), React.createElement(\"div\", {\n        className: \"kt-separator kt-separator--dashed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }), React.createElement(ButtonToolbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"pr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Primary\")), React.createElement(\"span\", {\n        className: \"pr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"secondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"Secondary\")), React.createElement(\"span\", {\n        className: \"pr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Success\")), React.createElement(\"span\", {\n        className: \"pr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"warning\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Warning\")), React.createElement(\"span\", {\n        className: \"pr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"Danger\")), React.createElement(\"span\", {\n        className: \"pr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"Info\"))), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"pr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"Light\")), React.createElement(\"span\", {\n        className: \"pr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"dark\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"Dark\")), React.createElement(\"span\", {\n        className: \"pr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"link\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"Link\"))))))), React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(CodeExample, {\n        jsCode: jsCode2,\n        beforeCodeTitle: \"Outline buttons\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"kt-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"kt-section__sub\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \"For a lighter touch, Buttons also come in\", \" \", React.createElement(\"code\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, \"outline-*\"), \" variants with no background color.\"), React.createElement(\"div\", {\n        className: \"kt-separator kt-separator--dashed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }), React.createElement(ButtonToolbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"pr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outline-primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"Primary\")), React.createElement(\"span\", {\n        className: \"pr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outline-secondary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, \"Secondary\")), React.createElement(\"span\", {\n        className: \"pr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outline-success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, \"Success\")), React.createElement(\"span\", {\n        className: \"pr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outline-warning\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, \"Warning\")), React.createElement(\"span\", {\n        className: \"pr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outline-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, \"Danger\"))), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"pr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outline-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, \"Info\")), React.createElement(\"span\", {\n        className: \"pr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outline-dark\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, \"Dark\")), React.createElement(\"span\", {\n        className: \"pr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"outline-light\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, \"Light\")))))))), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, React.createElement(CodeExample, {\n        jsCode: jsCode3,\n        beforeCodeTitle: \"Button tags\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"kt-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"kt-section__sub\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, \"Normally \", React.createElement(\"code\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, \"<Button>\"), \" components will render a HTML \", React.createElement(\"code\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, \"<button>\"), \" element. However you can render whatever you'd like, adding a \", React.createElement(\"code\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, \"href\"), \" prop will automatically render an \", React.createElement(\"code\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, \"<a />\"), \" element. You can use the \", React.createElement(\"code\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      }, \"as\"), \" prop to render whatever your heart desires. React Bootstrap will take care of the proper ARIA roles for you.\"), React.createElement(\"div\", {\n        className: \"kt-separator kt-separator--dashed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }), React.createElement(ButtonToolbar, {\n        className: \"pb-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"pr-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(Button, {\n        href: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, \"Link\")), React.createElement(\"span\", {\n        className: \"pr-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, \"Button\")), React.createElement(\"span\", {\n        className: \"pr-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(Button, {\n        as: \"input\",\n        type: \"button\",\n        value: \"Input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }))), React.createElement(ButtonToolbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"pr-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, React.createElement(Button, {\n        as: \"input\",\n        type: \"submit\",\n        value: \"Submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      })), React.createElement(\"span\", {\n        className: \"pr-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(Button, {\n        as: \"input\",\n        type: \"reset\",\n        value: \"Reset\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      })))))), React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, React.createElement(CodeExample, {\n        jsCode: jsCode4,\n        beforeCodeTitle: \"Sizes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"kt-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"kt-section__sub\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }, \"Fancy larger or smaller buttons? Add \", React.createElement(\"code\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, \"size=\\\"lg\\\"\"), \",\", \" \", React.createElement(\"code\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, \"size=\\\"sm\\\"\"), \" for additional sizes.\"), React.createElement(\"div\", {\n        className: \"kt-separator kt-separator--dashed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, React.createElement(ButtonToolbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"pr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"primary\",\n        size: \"lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, \"Large button\")), React.createElement(\"span\", {\n        className: \"pr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"secondary\",\n        size: \"lg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, \"Large button\")))), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, React.createElement(ButtonToolbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"pr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"primary\",\n        size: \"sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        },\n        __self: this\n      }, \"Small button\")), React.createElement(\"span\", {\n        className: \"pr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"secondary\",\n        size: \"sm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, \"Small button\"))))))))), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }, React.createElement(CodeExample, {\n        jsCode: jsCode5,\n        beforeCodeTitle: \"Sizes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"kt-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 274\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"kt-section__sub\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, \"Create block level buttons\\u2014those that span the full width of a parent\\u2014by adding block\"), React.createElement(\"div\", {\n        className: \"kt-separator kt-separator--dashed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"primary\",\n        size: \"lg\",\n        block: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }, \"Block level button\"), React.createElement(Button, {\n        variant: \"secondary\",\n        size: \"lg\",\n        block: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, \"Block level button\"))))), React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }, React.createElement(CodeExample, {\n        jsCode: jsCode6,\n        beforeCodeTitle: \"Active state\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"kt-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"kt-section__sub\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, \"To set a buttons active state simply set the components\", \" \", React.createElement(\"code\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }, \"active\"), \" prop.\"), React.createElement(\"div\", {\n        className: \"kt-separator kt-separator--dashed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }), React.createElement(ButtonToolbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"pr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"primary\",\n        size: \"lg\",\n        active: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 301\n        },\n        __self: this\n      }, \"Primary button\")), React.createElement(\"span\", {\n        className: \"pr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"secondary\",\n        size: \"lg\",\n        active: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }, \"Button\"))))))), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317\n        },\n        __self: this\n      }, React.createElement(CodeExample, {\n        jsCode: jsCode7,\n        beforeCodeTitle: \"Disabled state\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"kt-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"kt-section__sub\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320\n        },\n        __self: this\n      }, \"Make buttons look inactive by adding the \", React.createElement(\"code\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321\n        },\n        __self: this\n      }, \"disabled\"), \" \", \"prop to.\"), React.createElement(\"div\", {\n        className: \"kt-separator kt-separator--dashed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        },\n        __self: this\n      }), React.createElement(ButtonToolbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 325\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"pr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"primary\",\n        size: \"lg\",\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327\n        },\n        __self: this\n      }, \"Primary button\")), React.createElement(\"span\", {\n        className: \"pr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331\n        },\n        __self: this\n      }, React.createElement(Button, {\n        variant: \"secondary\",\n        size: \"lg\",\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }, \"Button\")), React.createElement(\"span\", {\n        className: \"pr-4\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336\n        },\n        __self: this\n      }, React.createElement(Button, {\n        href: \"#\",\n        variant: \"secondary\",\n        size: \"lg\",\n        disabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337\n        },\n        __self: this\n      }, \"Link\")))))), React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345\n        },\n        __self: this\n      }, React.createElement(CodeExample, {\n        jsCode: jsCode8,\n        beforeCodeTitle: \"Button loading state\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"kt-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"kt-section__sub\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 351\n        },\n        __self: this\n      }, \"When activating an asynchronous action from a button it is a good UX pattern to give the user feedback as to the loading state, this can easily be done by updating your\", \" \", React.createElement(\"code\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355\n        },\n        __self: this\n      }, \"<Button />\"), \"s props from a state change like below.\"), React.createElement(\"div\", {\n        className: \"kt-separator kt-separator--dashed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358\n        },\n        __self: this\n      }), React.createElement(LoadingButton, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 359\n        },\n        __self: this\n      }))))), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366\n        },\n        __self: this\n      }, React.createElement(CodeExample, {\n        jsCode: jsCode9,\n        beforeCodeTitle: \"Checkbox / Radio\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"kt-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"kt-section__sub\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369\n        },\n        __self: this\n      }, \"Button's can also be used to style \", React.createElement(\"code\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370\n        },\n        __self: this\n      }, \"checkbox\"), \" and\", \" \", React.createElement(\"code\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371\n        },\n        __self: this\n      }, \"radio\"), \" form elements. This is helpful when you want a toggle button that works neatly inside an HTML form.\"), React.createElement(\"div\", {\n        className: \"kt-separator kt-separator--dashed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 374\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"d-flex flex-column\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375\n        },\n        __self: this\n      }, React.createElement(ButtonGroup, {\n        toggle: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 376\n        },\n        __self: this\n      }, React.createElement(ToggleButton, {\n        type: \"checkbox\",\n        defaultChecked: true,\n        value: \"1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377\n        },\n        __self: this\n      }, \"Checked\")), React.createElement(ButtonGroup, {\n        toggle: true,\n        className: \"mt-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381\n        },\n        __self: this\n      }, React.createElement(ToggleButton, {\n        type: \"radio\",\n        name: \"radio\",\n        defaultChecked: true,\n        value: \"1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382\n        },\n        __self: this\n      }, \"Active\"), React.createElement(ToggleButton, {\n        type: \"radio\",\n        name: \"radio\",\n        value: \"2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390\n        },\n        __self: this\n      }, \"Radio\"), React.createElement(ToggleButton, {\n        type: \"radio\",\n        name: \"radio\",\n        value: \"3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 393\n        },\n        __self: this\n      }, \"Radio\")))))), React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401\n        },\n        __self: this\n      }, React.createElement(CodeExample, {\n        jsCode: jsCode10,\n        beforeCodeTitle: \"Uncontrolled\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"kt-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"kt-section__sub\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"kt-separator kt-separator--dashed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405\n        },\n        __self: this\n      }), React.createElement(React.Fragment, null, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407\n        },\n        __self: this\n      }, React.createElement(ButtonToolbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408\n        },\n        __self: this\n      }, React.createElement(ToggleButtonGroup, {\n        type: \"checkbox\",\n        defaultValue: [1, 3],\n        name: \"Uncontrolled\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409\n        },\n        __self: this\n      }, React.createElement(ToggleButton, {\n        value: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 414\n        },\n        __self: this\n      }, \"Checkbox 1 (pre-checked)\"), React.createElement(ToggleButton, {\n        value: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 417\n        },\n        __self: this\n      }, \"Checkbox 2\"), React.createElement(ToggleButton, {\n        value: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 418\n        },\n        __self: this\n      }, \"Checkbox 3 (pre-checked)\")))), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 424\n        },\n        __self: this\n      }, React.createElement(ButtonToolbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 425\n        },\n        __self: this\n      }, React.createElement(ToggleButtonGroup, {\n        type: \"radio\",\n        name: \"options\",\n        defaultValue: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 426\n        },\n        __self: this\n      }, React.createElement(ToggleButton, {\n        value: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431\n        },\n        __self: this\n      }, \"Radio 1 (pre-checked)\"), React.createElement(ToggleButton, {\n        value: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 434\n        },\n        __self: this\n      }, \"Radio 2\"), React.createElement(ToggleButton, {\n        value: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 435\n        },\n        __self: this\n      }, \"Radio 3\"))))))))), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 445\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-6\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 446\n        },\n        __self: this\n      }, React.createElement(CodeExample, {\n        jsCode: jsCode11,\n        beforeCodeTitle: \"Controlled\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 447\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"kt-section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 448\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"kt-section__sub\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 449\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"kt-separator kt-separator--dashed\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 450\n        },\n        __self: this\n      }), React.createElement(ToggleButtonGroupControlled, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 451\n        },\n        __self: this\n      }))))));\n    }\n  }]);\n\n  return ButtonsExamplesPage;\n}(React.Component);\n\nexport { ButtonsExamplesPage as default };\nvar jsCode1 = \"\\n<ButtonToolbar>\\n  <Button variant=\\\"primary\\\">Primary</Button>\\n  <Button variant=\\\"secondary\\\">Secondary</Button>\\n  <Button variant=\\\"success\\\">Success</Button>\\n  <Button variant=\\\"warning\\\">Warning</Button>\\n  <Button variant=\\\"danger\\\">Danger</Button>\\n  <Button variant=\\\"info\\\">Info</Button>\\n  <Button variant=\\\"light\\\">Light</Button>\\n  <Button variant=\\\"dark\\\">Dark</Button>\\n  <Button variant=\\\"link\\\">Link</Button>\\n</ButtonToolbar>\\n\";\nvar jsCode2 = \"\\n<ButtonToolbar>\\n  <Button variant=\\\"outline-primary\\\">Primary</Button>\\n  <Button variant=\\\"outline-secondary\\\">Secondary</Button>\\n  <Button variant=\\\"outline-success\\\">Success</Button>\\n  <Button variant=\\\"outline-warning\\\">Warning</Button>\\n  <Button variant=\\\"outline-danger\\\">Danger</Button>\\n  <Button variant=\\\"outline-info\\\">Info</Button>\\n  <Button variant=\\\"outline-light\\\">Light</Button>\\n  <Button variant=\\\"outline-dark\\\">Dark</Button>\\n</ButtonToolbar>\\n\";\nvar jsCode3 = \"\\n<ButtonToolbar>\\n  <Button href=\\\"#\\\">Link</Button>\\n  <Button type=\\\"submit\\\">Button</Button>\\n  <Button as=\\\"input\\\" type=\\\"button\\\" value=\\\"Input\\\" />\\n  <Button as=\\\"input\\\" type=\\\"submit\\\" value=\\\"Submit\\\" />\\n  <Button as=\\\"input\\\" type=\\\"reset\\\" value=\\\"Reset\\\" />\\n</ButtonToolbar>\\n\";\nvar jsCode4 = \"\\n<div>\\n  <ButtonToolbar>\\n    <Button variant=\\\"primary\\\" size=\\\"lg\\\">\\n      Large button\\n    </Button>\\n    <Button variant=\\\"secondary\\\" size=\\\"lg\\\">\\n      Large button\\n    </Button>\\n  </ButtonToolbar>\\n\\n  <ButtonToolbar>\\n    <Button variant=\\\"primary\\\" size=\\\"sm\\\">\\n      Small button\\n    </Button>\\n    <Button variant=\\\"secondary\\\" size=\\\"sm\\\">\\n      Small button\\n    </Button>\\n  </ButtonToolbar>\\n</div>\\n\";\nvar jsCode5 = \"\\n<div>\\n  <Button variant=\\\"primary\\\" size=\\\"lg\\\" block>\\n    Block level button\\n  </Button>\\n  <Button variant=\\\"secondary\\\" size=\\\"lg\\\" block>\\n    Block level button\\n  </Button>\\n</div>\\n\";\nvar jsCode6 = \"\\n<ButtonToolbar>\\n  <Button variant=\\\"primary\\\" size=\\\"lg\\\" active>\\n    Primary button\\n  </Button>\\n  <Button variant=\\\"secondary\\\" size=\\\"lg\\\" active>\\n    Button\\n  </Button>\\n</ButtonToolbar>\\n\";\nvar jsCode7 = \"\\n<ButtonToolbar>\\n  <Button variant=\\\"primary\\\" size=\\\"lg\\\" disabled>\\n    Primary button\\n  </Button>{' '}\\n  <Button variant=\\\"secondary\\\" size=\\\"lg\\\" disabled>\\n    Button\\n  </Button>{' '}\\n  <Button href=\\\"#\\\" variant=\\\"secondary\\\" size=\\\"lg\\\" disabled>\\n    Link\\n  </Button>\\n</ButtonToolbar>\\n\";\nvar jsCode8 = \"\\nfunction simulateNetworkRequest() {\\n  return new Promise(resolve => setTimeout(resolve, 2000));\\n}\\n\\nclass LoadingButton extends React.Component {\\n  constructor(props, context) {\\n    super(props, context);\\n\\n    this.handleClick = this.handleClick.bind(this);\\n\\n    this.state = {\\n      isLoading: false,\\n    };\\n  }\\n\\n  handleClick() {\\n    this.setState({ isLoading: true }, () => {\\n      simulateNetworkRequest().then(() => {\\n        this.setState({ isLoading: false });\\n      });\\n    });\\n  }\\n\\n  render() {\\n    const { isLoading } = this.state;\\n\\n    return (\\n      <Button\\n        variant=\\\"primary\\\"\\n        disabled={isLoading}\\n        onClick={!isLoading ? this.handleClick : null}\\n      >\\n        {isLoading ? 'Loading\\u2026' : 'Click to load'}\\n      </Button>\\n    );\\n  }\\n}\\n\\nrender(<LoadingButton />);\\n\";\nvar jsCode9 = \"\\n<div className=\\\"d-flex flex-column\\\">\\n  <ButtonGroup toggle>\\n    <ToggleButton type=\\\"checkbox\\\" defaultChecked value=\\\"1\\\">\\n      Checked\\n    </ToggleButton>\\n  </ButtonGroup>\\n  <ButtonGroup toggle className=\\\"mt-3\\\">\\n    <ToggleButton type=\\\"radio\\\" name=\\\"radio\\\" defaultChecked value=\\\"1\\\">\\n      Active\\n    </ToggleButton>\\n    <ToggleButton type=\\\"radio\\\" name=\\\"radio\\\" value=\\\"2\\\">\\n      Radio\\n    </ToggleButton>\\n    <ToggleButton type=\\\"radio\\\" name=\\\"radio\\\" value=\\\"3\\\">\\n      Radio\\n    </ToggleButton>\\n  </ButtonGroup>\\n</div>\\n\";\nvar jsCode10 = \"\\n<>\\n  <ButtonToolbar>\\n    <ToggleButtonGroup type=\\\"checkbox\\\" defaultValue={[1, 3]}>\\n      <ToggleButton value={1}>Checkbox 1 (pre-checked)</ToggleButton>\\n      <ToggleButton value={2}>Checkbox 2</ToggleButton>\\n      <ToggleButton value={3}>Checkbox 3 (pre-checked)</ToggleButton>\\n    </ToggleButtonGroup>\\n  </ButtonToolbar>\\n\\n  <ButtonToolbar>\\n    <ToggleButtonGroup type=\\\"radio\\\" name=\\\"options\\\" defaultValue={1}>\\n      <ToggleButton value={1}>Radio 1 (pre-checked)</ToggleButton>\\n      <ToggleButton value={2}>Radio 2</ToggleButton>\\n      <ToggleButton value={3}>Radio 3</ToggleButton>\\n    </ToggleButtonGroup>\\n  </ButtonToolbar>\\n</>\\n\";\nvar jsCode11 = \"\\nclass ToggleButtonGroupControlled extends React.Component {\\n  constructor(props, context) {\\n    super(props, context);\\n\\n    this.handleChange = this.handleChange.bind(this);\\n\\n    this.state = {\\n      value: [1, 3],\\n    };\\n  }\\n\\n  handleChange(value, event) {\\n    this.setState({ value });\\n  }\\n\\n  render() {\\n    return (\\n      <ToggleButtonGroup\\n        type=\\\"checkbox\\\"\\n        value={this.state.value}\\n        onChange={this.handleChange}\\n      >\\n        <ToggleButton value={1}>Option 1</ToggleButton>\\n        <ToggleButton value={2}>Option 2</ToggleButton>\\n        <ToggleButton value={3}>Option 3</ToggleButton>\\n      </ToggleButtonGroup>\\n    );\\n  }\\n}\\n\\nrender(<ToggleButtonGroupControlled />);\\n\";","map":{"version":3,"sources":["/Users/chosun/Project/metronic_v6.1.6/theme/react/demo1/client/src/app/pages/home/react-bootstrap/ButtonsExamplesPage.js"],"names":["React","Notice","CodeExample","Button","ButtonToolbar","ButtonGroup","ToggleButton","ToggleButtonGroup","simulateNetworkRequest","Promise","resolve","setTimeout","LoadingButton","props","context","handleClick","bind","state","isLoading","setState","then","Component","ToggleButtonGroupControlled","handleChange","value","event","ButtonsExamplesPage","jsCode1","jsCode2","jsCode3","jsCode4","jsCode5","jsCode6","jsCode7","jsCode8","jsCode9","jsCode10","jsCode11"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from \"react\";\r\nimport Notice from \"../../../partials/content/Notice\";\r\nimport CodeExample from \"../../../partials/content/CodeExample\";\r\nimport {\r\n  Button,\r\n  ButtonToolbar,\r\n  ButtonGroup,\r\n  ToggleButton,\r\n  ToggleButtonGroup\r\n} from \"react-bootstrap\";\r\n\r\nfunction simulateNetworkRequest() {\r\n  return new Promise(resolve => setTimeout(resolve, 2000));\r\n}\r\n\r\nclass LoadingButton extends React.Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n\r\n    this.state = {\r\n      isLoading: false\r\n    };\r\n  }\r\n\r\n  handleClick() {\r\n    this.setState({ isLoading: true }, () => {\r\n      simulateNetworkRequest().then(() => {\r\n        this.setState({ isLoading: false });\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { isLoading } = this.state;\r\n\r\n    return (\r\n      <Button\r\n        variant=\"primary\"\r\n        disabled={isLoading}\r\n        onClick={!isLoading ? this.handleClick : null}\r\n      >\r\n        {isLoading ? \"Loadingâ€¦\" : \"Click to load\"}\r\n      </Button>\r\n    );\r\n  }\r\n}\r\n\r\nclass ToggleButtonGroupControlled extends React.Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n\r\n    this.state = {\r\n      value: [1, 3]\r\n    };\r\n  }\r\n\r\n  handleChange(value, event) {\r\n    this.setState({ value });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ToggleButtonGroup\r\n        type=\"checkbox\"\r\n        onChange={this.handleChange}\r\n        defaultValue={this.state.value}\r\n        name=\"toggleButtonGroup\"\r\n      >\r\n        <ToggleButton value={1}>Option 1</ToggleButton>\r\n        <ToggleButton value={2}>Option 2</ToggleButton>\r\n        <ToggleButton value={3}>Option 3</ToggleButton>\r\n      </ToggleButtonGroup>\r\n    );\r\n  }\r\n}\r\n\r\nexport default class ButtonsExamplesPage extends React.Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Notice icon=\"flaticon-warning kt-font-primary\">\r\n          <p>\r\n            Custom button styles for actions in forms, dialogs, and more with\r\n            support for multiple sizes, states, and more.\r\n          </p>\r\n          <p>\r\n            For more info please check the components's official{\" \"}\r\n            <a\r\n              target=\"_blank\"\r\n              className=\"kt-link\"\r\n              rel=\"noopener noreferrer\"\r\n              href=\"\"\r\n            >\r\n              demos & documentation\r\n            </a>\r\n          </p>\r\n        </Notice>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <CodeExample jsCode={jsCode1} beforeCodeTitle=\"Examples\">\r\n              <div className=\"kt-section\">\r\n                <span className=\"kt-section__sub\">\r\n                  Use any of the available button style types to quickly create\r\n                  a styled button. Just modify the <code>variant</code> prop.\r\n                </span>\r\n                <div className=\"kt-separator kt-separator--dashed\" />\r\n                <ButtonToolbar>\r\n                  <p>\r\n                    <span className=\"pr-4\">\r\n                      <Button variant=\"primary\">Primary</Button>\r\n                    </span>\r\n                    <span className=\"pr-4\">\r\n                      <Button variant=\"secondary\">Secondary</Button>\r\n                    </span>\r\n                    <span className=\"pr-4\">\r\n                      <Button variant=\"success\">Success</Button>\r\n                    </span>\r\n                    <span className=\"pr-4\">\r\n                      <Button variant=\"warning\">Warning</Button>\r\n                    </span>\r\n                    <span className=\"pr-4\">\r\n                      <Button variant=\"danger\">Danger</Button>\r\n                    </span>\r\n                    <span className=\"pr-4\">\r\n                      <Button variant=\"info\">Info</Button>\r\n                    </span>\r\n                  </p>\r\n                  <p>\r\n                    <span className=\"pr-4\">\r\n                      <Button variant=\"light\">Light</Button>\r\n                    </span>\r\n                    <span className=\"pr-4\">\r\n                      <Button variant=\"dark\">Dark</Button>\r\n                    </span>\r\n                    <span className=\"pr-4\">\r\n                      <Button variant=\"link\">Link</Button>\r\n                    </span>\r\n                  </p>\r\n                </ButtonToolbar>\r\n              </div>\r\n            </CodeExample>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <CodeExample jsCode={jsCode2} beforeCodeTitle=\"Outline buttons\">\r\n              <div className=\"kt-section\">\r\n                <span className=\"kt-section__sub\">\r\n                  For a lighter touch, Buttons also come in{\" \"}\r\n                  <code>outline-*</code> variants with no background color.\r\n                </span>\r\n                <div className=\"kt-separator kt-separator--dashed\" />\r\n                <ButtonToolbar>\r\n                  <p>\r\n                    <span className=\"pr-4\">\r\n                      <Button variant=\"outline-primary\">Primary</Button>\r\n                    </span>\r\n                    <span className=\"pr-4\">\r\n                      <Button variant=\"outline-secondary\">Secondary</Button>\r\n                    </span>\r\n                    <span className=\"pr-4\">\r\n                      <Button variant=\"outline-success\">Success</Button>\r\n                    </span>\r\n                    <span className=\"pr-4\">\r\n                      <Button variant=\"outline-warning\">Warning</Button>\r\n                    </span>\r\n                    <span className=\"pr-4\">\r\n                      <Button variant=\"outline-danger\">Danger</Button>\r\n                    </span>\r\n                  </p>\r\n                  <p>\r\n                    <span className=\"pr-4\">\r\n                      <Button variant=\"outline-info\">Info</Button>\r\n                    </span>\r\n                    <span className=\"pr-4\">\r\n                      <Button variant=\"outline-dark\">Dark</Button>\r\n                    </span>\r\n                    <span className=\"pr-4\">\r\n                      <Button variant=\"outline-light\">Light</Button>\r\n                    </span>\r\n                  </p>\r\n                </ButtonToolbar>\r\n              </div>\r\n            </CodeExample>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <CodeExample jsCode={jsCode3} beforeCodeTitle=\"Button tags\">\r\n              <div className=\"kt-section\">\r\n                <span className=\"kt-section__sub\">\r\n                  Normally <code>&lt;Button&gt;</code> components will render a\r\n                  HTML <code>&lt;button&gt;</code> element. However you can\r\n                  render whatever you'd like, adding a <code>href</code> prop\r\n                  will automatically render an <code>&lt;a /&gt;</code> element.\r\n                  You can use the <code>as</code> prop to render whatever your\r\n                  heart desires. React Bootstrap will take care of the proper\r\n                  ARIA roles for you.\r\n                </span>\r\n                <div className=\"kt-separator kt-separator--dashed\" />\r\n                <ButtonToolbar className=\"pb-2\">\r\n                  <span className=\"pr-1\">\r\n                    <Button href=\"#\">Link</Button>\r\n                  </span>\r\n                  <span className=\"pr-1\">\r\n                    <Button type=\"submit\">Button</Button>\r\n                  </span>\r\n                  <span className=\"pr-1\">\r\n                    <Button as=\"input\" type=\"button\" value=\"Input\" />\r\n                  </span>\r\n                </ButtonToolbar>\r\n                <ButtonToolbar>\r\n                  <span className=\"pr-1\">\r\n                    <Button as=\"input\" type=\"submit\" value=\"Submit\" />\r\n                  </span>\r\n                  <span className=\"pr-1\">\r\n                    <Button as=\"input\" type=\"reset\" value=\"Reset\" />\r\n                  </span>\r\n                </ButtonToolbar>\r\n              </div>\r\n            </CodeExample>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <CodeExample jsCode={jsCode4} beforeCodeTitle=\"Sizes\">\r\n              <div className=\"kt-section\">\r\n                <span className=\"kt-section__sub\">\r\n                  Fancy larger or smaller buttons? Add <code>size=\"lg\"</code>,{\" \"}\r\n                  <code>size=\"sm\"</code> for additional sizes.\r\n                </span>\r\n                <div className=\"kt-separator kt-separator--dashed\" />\r\n                <div>\r\n                  <p>\r\n                    <ButtonToolbar>\r\n                      <span className=\"pr-4\">\r\n                        <Button variant=\"primary\" size=\"lg\">\r\n                          Large button\r\n                        </Button>\r\n                      </span>\r\n                      <span className=\"pr-4\">\r\n                        <Button variant=\"secondary\" size=\"lg\">\r\n                          Large button\r\n                        </Button>\r\n                      </span>\r\n                    </ButtonToolbar>\r\n                  </p>\r\n                  <p>\r\n                    <ButtonToolbar>\r\n                      <span className=\"pr-4\">\r\n                        <Button variant=\"primary\" size=\"sm\">\r\n                          Small button\r\n                        </Button>\r\n                      </span>\r\n                      <span className=\"pr-4\">\r\n                        <Button variant=\"secondary\" size=\"sm\">\r\n                          Small button\r\n                        </Button>\r\n                      </span>\r\n                    </ButtonToolbar>\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </CodeExample>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <CodeExample jsCode={jsCode5} beforeCodeTitle=\"Sizes\">\r\n              <div className=\"kt-section\">\r\n                <span className=\"kt-section__sub\">\r\n                  Create block level buttonsâ€”those that span the full width of a\r\n                  parentâ€”by adding block\r\n                </span>\r\n                <div className=\"kt-separator kt-separator--dashed\" />\r\n                <div>\r\n                  <Button variant=\"primary\" size=\"lg\" block>\r\n                    Block level button\r\n                  </Button>\r\n                  <Button variant=\"secondary\" size=\"lg\" block>\r\n                    Block level button\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </CodeExample>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <CodeExample jsCode={jsCode6} beforeCodeTitle=\"Active state\">\r\n              <div className=\"kt-section\">\r\n                <span className=\"kt-section__sub\">\r\n                  To set a buttons active state simply set the components{\" \"}\r\n                  <code>active</code> prop.\r\n                </span>\r\n                <div className=\"kt-separator kt-separator--dashed\" />\r\n                <ButtonToolbar>\r\n                  <span className=\"pr-4\">\r\n                    <Button variant=\"primary\" size=\"lg\" active>\r\n                      Primary button\r\n                    </Button>\r\n                  </span>\r\n                  <span className=\"pr-4\">\r\n                    <Button variant=\"secondary\" size=\"lg\" active>\r\n                      Button\r\n                    </Button>\r\n                  </span>\r\n                </ButtonToolbar>\r\n              </div>\r\n            </CodeExample>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <CodeExample jsCode={jsCode7} beforeCodeTitle=\"Disabled state\">\r\n              <div className=\"kt-section\">\r\n                <span className=\"kt-section__sub\">\r\n                  Make buttons look inactive by adding the <code>disabled</code>{\" \"}\r\n                  prop to.\r\n                </span>\r\n                <div className=\"kt-separator kt-separator--dashed\" />\r\n                <ButtonToolbar>\r\n                  <span className=\"pr-4\">\r\n                    <Button variant=\"primary\" size=\"lg\" disabled>\r\n                      Primary button\r\n                    </Button>\r\n                  </span>\r\n                  <span className=\"pr-4\">\r\n                    <Button variant=\"secondary\" size=\"lg\" disabled>\r\n                      Button\r\n                    </Button>\r\n                  </span>\r\n                  <span className=\"pr-4\">\r\n                    <Button href=\"#\" variant=\"secondary\" size=\"lg\" disabled>\r\n                      Link\r\n                    </Button>\r\n                  </span>\r\n                </ButtonToolbar>\r\n              </div>\r\n            </CodeExample>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <CodeExample\r\n              jsCode={jsCode8}\r\n              beforeCodeTitle=\"Button loading state\"\r\n            >\r\n              <div className=\"kt-section\">\r\n                <span className=\"kt-section__sub\">\r\n                  When activating an asynchronous action from a button it is a\r\n                  good UX pattern to give the user feedback as to the loading\r\n                  state, this can easily be done by updating your{\" \"}\r\n                  <code>&lt;Button /&gt;</code>s props from a state change like\r\n                  below.\r\n                </span>\r\n                <div className=\"kt-separator kt-separator--dashed\" />\r\n                <LoadingButton />\r\n              </div>\r\n            </CodeExample>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <CodeExample jsCode={jsCode9} beforeCodeTitle=\"Checkbox / Radio\">\r\n              <div className=\"kt-section\">\r\n                <span className=\"kt-section__sub\">\r\n                  Button's can also be used to style <code>checkbox</code> and{\" \"}\r\n                  <code>radio</code> form elements. This is helpful when you\r\n                  want a toggle button that works neatly inside an HTML form.\r\n                </span>\r\n                <div className=\"kt-separator kt-separator--dashed\" />\r\n                <div className=\"d-flex flex-column\">\r\n                  <ButtonGroup toggle>\r\n                    <ToggleButton type=\"checkbox\" defaultChecked value=\"1\">\r\n                      Checked\r\n                    </ToggleButton>\r\n                  </ButtonGroup>\r\n                  <ButtonGroup toggle className=\"mt-3\">\r\n                    <ToggleButton\r\n                      type=\"radio\"\r\n                      name=\"radio\"\r\n                      defaultChecked\r\n                      value=\"1\"\r\n                    >\r\n                      Active\r\n                    </ToggleButton>\r\n                    <ToggleButton type=\"radio\" name=\"radio\" value=\"2\">\r\n                      Radio\r\n                    </ToggleButton>\r\n                    <ToggleButton type=\"radio\" name=\"radio\" value=\"3\">\r\n                      Radio\r\n                    </ToggleButton>\r\n                  </ButtonGroup>\r\n                </div>\r\n              </div>\r\n            </CodeExample>\r\n          </div>\r\n          <div className=\"col-md-6\">\r\n            <CodeExample jsCode={jsCode10} beforeCodeTitle=\"Uncontrolled\">\r\n              <div className=\"kt-section\">\r\n                <span className=\"kt-section__sub\" />\r\n                <div className=\"kt-separator kt-separator--dashed\" />\r\n                <>\r\n                  <p>\r\n                    <ButtonToolbar>\r\n                      <ToggleButtonGroup\r\n                        type=\"checkbox\"\r\n                        defaultValue={[1, 3]}\r\n                        name=\"Uncontrolled\"\r\n                      >\r\n                        <ToggleButton value={1}>\r\n                          Checkbox 1 (pre-checked)\r\n                        </ToggleButton>\r\n                        <ToggleButton value={2}>Checkbox 2</ToggleButton>\r\n                        <ToggleButton value={3}>\r\n                          Checkbox 3 (pre-checked)\r\n                        </ToggleButton>\r\n                      </ToggleButtonGroup>\r\n                    </ButtonToolbar>\r\n                  </p>\r\n                  <p>\r\n                    <ButtonToolbar>\r\n                      <ToggleButtonGroup\r\n                        type=\"radio\"\r\n                        name=\"options\"\r\n                        defaultValue={1}\r\n                      >\r\n                        <ToggleButton value={1}>\r\n                          Radio 1 (pre-checked)\r\n                        </ToggleButton>\r\n                        <ToggleButton value={2}>Radio 2</ToggleButton>\r\n                        <ToggleButton value={3}>Radio 3</ToggleButton>\r\n                      </ToggleButtonGroup>\r\n                    </ButtonToolbar>\r\n                  </p>\r\n                </>\r\n              </div>\r\n            </CodeExample>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-md-6\">\r\n            <CodeExample jsCode={jsCode11} beforeCodeTitle=\"Controlled\">\r\n              <div className=\"kt-section\">\r\n                <span className=\"kt-section__sub\"></span>\r\n                <div className=\"kt-separator kt-separator--dashed\"></div>\r\n                <ToggleButtonGroupControlled />\r\n              </div>\r\n            </CodeExample>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst jsCode1 = `\r\n<ButtonToolbar>\r\n  <Button variant=\"primary\">Primary</Button>\r\n  <Button variant=\"secondary\">Secondary</Button>\r\n  <Button variant=\"success\">Success</Button>\r\n  <Button variant=\"warning\">Warning</Button>\r\n  <Button variant=\"danger\">Danger</Button>\r\n  <Button variant=\"info\">Info</Button>\r\n  <Button variant=\"light\">Light</Button>\r\n  <Button variant=\"dark\">Dark</Button>\r\n  <Button variant=\"link\">Link</Button>\r\n</ButtonToolbar>\r\n`;\r\nconst jsCode2 = `\r\n<ButtonToolbar>\r\n  <Button variant=\"outline-primary\">Primary</Button>\r\n  <Button variant=\"outline-secondary\">Secondary</Button>\r\n  <Button variant=\"outline-success\">Success</Button>\r\n  <Button variant=\"outline-warning\">Warning</Button>\r\n  <Button variant=\"outline-danger\">Danger</Button>\r\n  <Button variant=\"outline-info\">Info</Button>\r\n  <Button variant=\"outline-light\">Light</Button>\r\n  <Button variant=\"outline-dark\">Dark</Button>\r\n</ButtonToolbar>\r\n`;\r\nconst jsCode3 = `\r\n<ButtonToolbar>\r\n  <Button href=\"#\">Link</Button>\r\n  <Button type=\"submit\">Button</Button>\r\n  <Button as=\"input\" type=\"button\" value=\"Input\" />\r\n  <Button as=\"input\" type=\"submit\" value=\"Submit\" />\r\n  <Button as=\"input\" type=\"reset\" value=\"Reset\" />\r\n</ButtonToolbar>\r\n`;\r\nconst jsCode4 = `\r\n<div>\r\n  <ButtonToolbar>\r\n    <Button variant=\"primary\" size=\"lg\">\r\n      Large button\r\n    </Button>\r\n    <Button variant=\"secondary\" size=\"lg\">\r\n      Large button\r\n    </Button>\r\n  </ButtonToolbar>\r\n\r\n  <ButtonToolbar>\r\n    <Button variant=\"primary\" size=\"sm\">\r\n      Small button\r\n    </Button>\r\n    <Button variant=\"secondary\" size=\"sm\">\r\n      Small button\r\n    </Button>\r\n  </ButtonToolbar>\r\n</div>\r\n`;\r\nconst jsCode5 = `\r\n<div>\r\n  <Button variant=\"primary\" size=\"lg\" block>\r\n    Block level button\r\n  </Button>\r\n  <Button variant=\"secondary\" size=\"lg\" block>\r\n    Block level button\r\n  </Button>\r\n</div>\r\n`;\r\nconst jsCode6 = `\r\n<ButtonToolbar>\r\n  <Button variant=\"primary\" size=\"lg\" active>\r\n    Primary button\r\n  </Button>\r\n  <Button variant=\"secondary\" size=\"lg\" active>\r\n    Button\r\n  </Button>\r\n</ButtonToolbar>\r\n`;\r\nconst jsCode7 = `\r\n<ButtonToolbar>\r\n  <Button variant=\"primary\" size=\"lg\" disabled>\r\n    Primary button\r\n  </Button>{' '}\r\n  <Button variant=\"secondary\" size=\"lg\" disabled>\r\n    Button\r\n  </Button>{' '}\r\n  <Button href=\"#\" variant=\"secondary\" size=\"lg\" disabled>\r\n    Link\r\n  </Button>\r\n</ButtonToolbar>\r\n`;\r\nconst jsCode8 = `\r\nfunction simulateNetworkRequest() {\r\n  return new Promise(resolve => setTimeout(resolve, 2000));\r\n}\r\n\r\nclass LoadingButton extends React.Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n\r\n    this.state = {\r\n      isLoading: false,\r\n    };\r\n  }\r\n\r\n  handleClick() {\r\n    this.setState({ isLoading: true }, () => {\r\n      simulateNetworkRequest().then(() => {\r\n        this.setState({ isLoading: false });\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { isLoading } = this.state;\r\n\r\n    return (\r\n      <Button\r\n        variant=\"primary\"\r\n        disabled={isLoading}\r\n        onClick={!isLoading ? this.handleClick : null}\r\n      >\r\n        {isLoading ? 'Loadingâ€¦' : 'Click to load'}\r\n      </Button>\r\n    );\r\n  }\r\n}\r\n\r\nrender(<LoadingButton />);\r\n`;\r\nconst jsCode9 = `\r\n<div className=\"d-flex flex-column\">\r\n  <ButtonGroup toggle>\r\n    <ToggleButton type=\"checkbox\" defaultChecked value=\"1\">\r\n      Checked\r\n    </ToggleButton>\r\n  </ButtonGroup>\r\n  <ButtonGroup toggle className=\"mt-3\">\r\n    <ToggleButton type=\"radio\" name=\"radio\" defaultChecked value=\"1\">\r\n      Active\r\n    </ToggleButton>\r\n    <ToggleButton type=\"radio\" name=\"radio\" value=\"2\">\r\n      Radio\r\n    </ToggleButton>\r\n    <ToggleButton type=\"radio\" name=\"radio\" value=\"3\">\r\n      Radio\r\n    </ToggleButton>\r\n  </ButtonGroup>\r\n</div>\r\n`;\r\nconst jsCode10 = `\r\n<>\r\n  <ButtonToolbar>\r\n    <ToggleButtonGroup type=\"checkbox\" defaultValue={[1, 3]}>\r\n      <ToggleButton value={1}>Checkbox 1 (pre-checked)</ToggleButton>\r\n      <ToggleButton value={2}>Checkbox 2</ToggleButton>\r\n      <ToggleButton value={3}>Checkbox 3 (pre-checked)</ToggleButton>\r\n    </ToggleButtonGroup>\r\n  </ButtonToolbar>\r\n\r\n  <ButtonToolbar>\r\n    <ToggleButtonGroup type=\"radio\" name=\"options\" defaultValue={1}>\r\n      <ToggleButton value={1}>Radio 1 (pre-checked)</ToggleButton>\r\n      <ToggleButton value={2}>Radio 2</ToggleButton>\r\n      <ToggleButton value={3}>Radio 3</ToggleButton>\r\n    </ToggleButtonGroup>\r\n  </ButtonToolbar>\r\n</>\r\n`;\r\nconst jsCode11 = `\r\nclass ToggleButtonGroupControlled extends React.Component {\r\n  constructor(props, context) {\r\n    super(props, context);\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n\r\n    this.state = {\r\n      value: [1, 3],\r\n    };\r\n  }\r\n\r\n  handleChange(value, event) {\r\n    this.setState({ value });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ToggleButtonGroup\r\n        type=\"checkbox\"\r\n        value={this.state.value}\r\n        onChange={this.handleChange}\r\n      >\r\n        <ToggleButton value={1}>Option 1</ToggleButton>\r\n        <ToggleButton value={2}>Option 2</ToggleButton>\r\n        <ToggleButton value={3}>Option 3</ToggleButton>\r\n      </ToggleButtonGroup>\r\n    );\r\n  }\r\n}\r\n\r\nrender(<ToggleButtonGroupControlled />);\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}